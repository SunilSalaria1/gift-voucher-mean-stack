{
  "swagger": "2.0",
  "info": {
    "title": "My API",
    "description": "Description",
    "version": "1.0.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [
    {
      "name": "Users",
      "description": "User Routes"
    }
  ],
  "schemes": [
    "http"
  ],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 1safsfsdfdfd\""
    }
  },
  "paths": {
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Get all users.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "role",
            "in": "query",
            "type": "string"
          },
          {
            "name": "searchItem",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Get User with Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "description": "Update User with Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "User update details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "description": "Delete User with Id .",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Login user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User login credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Login successful"
          },
          "400": {
            "description": "Missing required fields or Invalid credentials"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Logout user",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Logout successful"
          },
          "400": {
            "description": "Missing token or Invalid token"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Register user",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "User registration details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/registerUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User Created successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Invalid credentials"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/suggestion": {
      "post": {
        "tags": [
          "Suggestion section"
        ],
        "description": "",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "example": "any"
                },
                "description": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Suggestion section"
        ],
        "description": "",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/upload": {
      "post": {
        "tags": [
          "Upload Image"
        ],
        "description": "",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/products": {
      "post": {
        "tags": [
          "Products"
        ],
        "description": "Add Product",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Product details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/addProduct"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Product Added successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Products"
        ],
        "description": "Get all Products.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "searchItem",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/products/{id}": {
      "put": {
        "tags": [
          "Products"
        ],
        "description": "Add Product",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "User registration details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Product Updated successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Products"
        ],
        "description": "Get Product with Id .",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "description": "Delete User with Id .",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/{id}/gifts": {
      "put": {
        "tags": [
          "Gifts"
        ],
        "description": "Update User Gift Pick with Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "User update details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserGiftPick"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Gifts"
        ],
        "description": "Delete User Gift Pick with Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "isPicked",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/gifts": {
      "get": {
        "tags": [
          "Gifts"
        ],
        "description": "All Users Gift Pick.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "role",
            "in": "query",
            "type": "string"
          },
          {
            "name": "searchItem",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/couponCode/{couponCode}": {
      "get": {
        "tags": [
          "Validate Coupon Code"
        ],
        "description": "Get Coupon Code .",
        "parameters": [
          {
            "name": "couponCode",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/{id}/role": {
      "put": {
        "tags": [
          "Admin"
        ],
        "description": "Update User with Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Admin Creation details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createAdmin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Admin Created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/events": {
      "post": {
        "tags": [
          "Event"
        ],
        "description": "Create Event",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Event creation details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Event Created successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Invalid "
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Event"
        ],
        "description": "Get all Events",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/{id}": {
      "put": {
        "tags": [
          "Event"
        ],
        "description": "Create Event",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Event update details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event Updated successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Invalid "
          }
        }
      },
      "delete": {
        "tags": [
          "Event"
        ],
        "description": "Deletes an event by marking it as deleted",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Event deleted successfully"
          },
          "400": {
            "description": "Invalid Event ID format or validation error"
          },
          "404": {
            "description": "Event not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Event"
        ],
        "description": "Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "registerUser": {
      "type": "object",
      "properties": {
        "dob": {
          "type": "string",
          "example": "Fri Feb 28 2025 13:37:04 GMT+0530 (India Standard Time)"
        },
        "joiningDate": {
          "type": "string",
          "example": "Fri Feb 28 2025 13:37:04 GMT+0530 (India Standard Time)"
        },
        "email": {
          "type": "string",
          "example": "aniket98578@gmail.com"
        },
        "name": {
          "type": "string",
          "example": "Aniket Sharma"
        },
        "department": {
          "type": "string",
          "example": "Frontend"
        }
      }
    },
    "updateUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Aniket Sharma"
        },
        "department": {
          "type": "string",
          "example": "Front End"
        }
      }
    },
    "loginAdmin": {
      "type": "object",
      "properties": {
        "employeeCode": {
          "type": "string",
          "example": "LPIT30281076"
        },
        "password": {
          "type": "string",
          "example": "jyo04122001"
        },
        "role": {
          "type": "string",
          "example": "admin"
        }
      }
    },
    "loginUser": {
      "type": "object",
      "properties": {
        "employeeCode": {
          "type": "string",
          "example": "LPIT30281076"
        },
        "role": {
          "type": "string",
          "example": "employee"
        }
      }
    },
    "createAdmin": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "67a4af8cf19f72c03d3d4547"
        },
        "isAdmin": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "addProduct": {
      "type": "object",
      "properties": {
        "couponCode": {
          "type": "string",
          "example": "lp12345"
        },
        "productImageId": {
          "type": "string",
          "example": "image id"
        },
        "productDescription": {
          "type": "string",
          "example": "this product is good"
        },
        "productTitle": {
          "type": "string",
          "example": "bottle"
        }
      }
    },
    "UpdateProduct": {
      "type": "object",
      "properties": {
        "couponCode": {
          "type": "string",
          "example": "lp12345"
        },
        "productImageId": {
          "type": "string",
          "example": "image id"
        },
        "productDescription": {
          "type": "string",
          "example": "this product is good"
        },
        "productTitle": {
          "type": "string",
          "example": "bottle"
        }
      }
    },
    "UpdateUserGiftPick": {
      "type": "object",
      "properties": {
        "isPicked": {
          "type": "string",
          "example": "completed"
        },
        "productId": {
          "type": "string",
          "example": "productId"
        }
      }
    },
    "DeleteUserGiftPick": {
      "type": "object",
      "properties": {
        "isPicked": {
          "type": "string",
          "example": "pending"
        }
      }
    },
    "createEvent": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "A friendly Cricket Match"
        },
        "about": {
          "type": "string",
          "example": "A friendly Cricket Match"
        },
        "imageId": {
          "type": "string",
          "example": "string imageId"
        },
        "address": {
          "type": "string",
          "example": "mohali 8b near airport road"
        },
        "date": {
          "type": "string",
          "example": "01/03/2025"
        },
        "time": {
          "type": "string",
          "example": "hh:mm AM/PM"
        },
        "note": {
          "type": "string",
          "example": "optional"
        },
        "whyYouAttend": {
          "type": "string",
          "example": "optional"
        }
      }
    },
    "updateEvent": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "A friendly Cricket Match"
        },
        "about": {
          "type": "string",
          "example": "A friendly Cricket Match"
        },
        "imageId": {
          "type": "string",
          "example": "string imageId"
        },
        "address": {
          "type": "string",
          "example": "mohali 8b near airport road"
        },
        "date": {
          "type": "string",
          "example": "01/03/2025"
        },
        "time": {
          "type": "string",
          "example": "hh:mm AM/PM"
        },
        "note": {
          "type": "string",
          "example": "optional"
        },
        "whyYouAttend": {
          "type": "string",
          "example": "optional"
        }
      }
    }
  }
}